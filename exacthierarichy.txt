import json
from collections import defaultdict

# Example Input JSON
input_json = {
    "src\\modules\\MainApp.js": [
        {
            "code_file": "src\\modules\\CitySearchResults.js",
            "type": "function",
            "name": "CitySearchResults",
            "code_content": "function CitySearchResults() { //... }",
            "description": "Displays the city search results.",
            "vulnerability": "Potential XSS vulnerability if input is not sanitized."
        },
        {
            "code_file": "src\\modules\\CitySearchResults.js",
            "type": "function",
            "name": "renderCitySearchResults",
            "code_content": "function renderCitySearchResults() { //... }",
            "description": "Renders the city search results to the DOM.",
            "vulnerability": "Potential performance issue with large datasets."
        },
        {
            "code_file": "src\\modules\\ErrorMessage.js",
            "type": "function",
            "name": "ErrorMessage",
            "code_content": "function ErrorMessage() { //... }",
            "description": "Displays an error message.",
            "vulnerability": "Can be manipulated by the client if not properly handled."
        }
    ],
    "src\\modules\\CitySearchResults.js": [
        {
            "code_file": "src\\modules\\CitySearchResults.js",
            "type": "function",
            "name": "removeCitySearchResults",
            "code_content": "function removeCitySearchResults() { //... }",
            "description": "Removes the city search results from the DOM.",
            "vulnerability": "No direct vulnerabilities identified."
        }
    ],
    "src\\modules\\ErrorMessage.js": [
        {
            "code_file": "src\\modules\\ErrorMessage.js",
            "type": "function",
            "name": "removeErrorMessage",
            "code_content": "function removeErrorMessage() { //... }",
            "description": "Removes the error message from the DOM.",
            "vulnerability": "No direct vulnerabilities identified."
        }
    ]
}

# Step 1: Build a mapping of file dependencies and functions
dependency_map = defaultdict(list)
file_functions = defaultdict(list)

for file, entries in input_json.items():
    for entry in entries:
        dependency_map[file].append({
            "dependency_file": entry["code_file"],
            "function_name": entry["name"]
        })
        file_functions[file].append(entry["name"])

# Step 2: Function to build the hierarchical JSON data for each file
def build_tree(file, visited):
    if file in visited:
        return {"functions": []}  # Prevent circular references

    visited.add(file)
    children = {}
    used_functions = set(file_functions[file])  # Start with functions from the current file

    for dep in dependency_map.get(file, []):
        # Prevent adding the file as its own dependency
        if dep["dependency_file"] != file:
            child_tree = build_tree(dep["dependency_file"], visited)

            # Ensure the functions from the child file are included in the parent file's function list
            used_functions.update(child_tree.get("functions", []))

            children[dep["dependency_file"]] = child_tree

    visited.remove(file)

    # If there are no children (leaf node), return the list of functions in the current file
    if not children:
        return {
            "functions": list(used_functions)  # All functions from this leaf file
        }

    return {
        "dependencies": children,
        "functions": list(used_functions)  # All functions used in this file, including dependencies
    }

# Step 3: Create separate hierarchical JSON for each file
visited = set()
separate_hierarchies = {}

# Create the hierarchical JSON for each file separately
for file in input_json.keys():
    separate_hierarchies[file] = build_tree(file, visited)

# Step 4: Print the hierarchical JSON for each file
print(json.dumps(separate_hierarchies, indent=4))
